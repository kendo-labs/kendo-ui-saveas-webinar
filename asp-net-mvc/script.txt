  @(Html.Kendo().Spreadsheet()
    .Name("spreadsheet")
    .HtmlAttributes(new { style = "width:100%;" })
    .RowHeight(50)
)

<script>        

    window.APP = {};

    APP.updateSpreadsheet = function () {
        var spreadsheet = $("#spreadsheet").data("kendoSpreadsheet");

        $.getJSON("@Url.Action("Read", "Home")")
        .done(function (data) {
            spreadsheet.fromJSON(data);
        });
    }

</script>

<script>
    $(function () {
        window.APP.updateSpreadsheet();
    });
</script>
 
 public ActionResult Read() {
        var path = Server.MapPath("~/App_Data/spreadsheets/"police-data-uk.xlsx");
        var workbook = Telerik.Web.Spreadsheet.Workbook.Load(path);

        //Uses Newtonsoft.Json internally to serialize fields correctly.
        return Content(workbook.ToJson(), Telerik.Web.Spreadsheet.MimeTypes.JSON);
    }

 public ActionResult Read() {
    var path = Server.MapPath("~/App_Data/spreadsheets/" + Session["FileToLoad"].ToString());
    var workbook = Telerik.Web.Spreadsheet.Workbook.Load(path);

    //Uses Newtonsoft.Json internally to serialize fields correctly.
    return Content(workbook.ToJson(), Telerik.Web.Spreadsheet.MimeTypes.JSON);
}

@(Html.Kendo().Upload()
    .Name("files")
    .Async(a => a
        .Save("Save", "Home")
        .AutoUpload(true)
    )
    .Events(e => e
        .Complete("APP.updateSpreadsheet")
    )
)

public ActionResult Save(IEnumerable<HttpPostedFileBase> files) {
    // The Name of the Upload component is "files"
    if (files != null) {
        foreach (var file in files) {
            // Some browsers send file names with full path.
            // We are only interested in the file name.
            var fileName = Path.GetFileName(file.FileName);
            var physicalPath = Path.Combine(Server.MapPath("~/App_Data/spreadsheets"), fileName);

            // The files are not actually saved in this demo
            file.SaveAs(physicalPath);

            Session.Add("FileToLoad", fileName);
        }
    }

    // Return an empty string to signify success
    return Content("");
}

public ActionResult Remove(string[] fileNames) {
    // The parameter of the Remove action must be called "fileNames"

    if (fileNames != null) {
        foreach (var fullName in fileNames) {
            var fileName = Path.GetFileName(fullName);
            var physicalPath = Path.Combine(Server.MapPath("~/App_Data"), fileName);

            // TODO: Verify user permissions

            if (System.IO.File.Exists(physicalPath)) {
                // The files are not actually removed in this demo
                // System.IO.File.Delete(physicalPath);
            }
        }
    }

    // Return an empty string to signify success
    return Content("");

}